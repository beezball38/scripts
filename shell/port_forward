#!/bin/bash

# Function to display usage
usage() {
    echo "Usage: $0 -p local_port -h remote_host -r remote_port -u ssh_user [--key private_key_file]"
    exit 1
}

# Parse command-line arguments
while [[ "$#" -gt 0 ]]; do
    case $1 in
        -p|--port) LOCAL_PORT="$2"; shift ;;
        -h|--host) REMOTE_HOST="$2"; shift ;;
        -r|--remote-port) REMOTE_PORT="$2"; shift ;;
        -u|--user) SSH_USER="$2"; shift ;;
        --key) PRIVATE_KEY_FILE="$2"; shift ;;
        *) usage ;;
    esac
    shift
done

# Check if required arguments are provided
if [ -z "$LOCAL_PORT" ] || [ -z "$REMOTE_HOST" ] || [ -z "$REMOTE_PORT" ] || [ -z "$SSH_USER" ]; then
    usage
fi

# Check if the port is already being forwarded
if lsof -i :$LOCAL_PORT >/dev/null 2>&1; then
    echo "Port $LOCAL_PORT is already being forwarded."
    read -p "Do you want to kill the existing SSH tunnel? (y/n): " choice
    if [ "$choice" == "y" ]; then
        # Find and kill the SSH process forwarding the port
        PID=$(lsof -ti :$LOCAL_PORT)
        kill $PID
        echo "Killed the existing SSH tunnel."
    else
        echo "Exiting without creating a new SSH tunnel."
        exit 0
    fi
fi

# Create the new SSH tunnel in the background
if [ -z "$PRIVATE_KEY_FILE" ]; then
    ssh -L $LOCAL_PORT:127.0.0.1:$REMOTE_PORT $SSH_USER@$REMOTE_HOST -N &
else
    ssh -i $PRIVATE_KEY_FILE -L $LOCAL_PORT:127.0.0.1:$REMOTE_PORT $SSH_USER@$REMOTE_HOST -N &
fi

echo "SSH tunnel created and running in the background."

# Optional: Save the PID of the new SSH process
echo $! > ssh_tunnel.pid

# End of script

